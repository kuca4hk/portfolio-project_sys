"""
Django settings for back project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
import dataclasses
import dj_database_url
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


@dataclasses.dataclass
class Config:
    PROJECT_SECRET_KEY: str
    DB_URL: str


if not config("INSECURE_ENV_SECRETS", cast=bool, default=False):
    # by default, get secrets from docker secrets
    with open("/etc/secrets/registry-config.json") as secrets_file:
        SECRETS = Config(**json.loads(secrets_file.read()))
else:
    # locally, get secrets from env vars
    SECRETS = Config(
        PROJECT_SECRET_KEY=config("PROJECT_SECRET_KEY"),
        DB_URL=config("DB_URL"),
    )

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRETS.PROJECT_SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG_TOOLBAR = config("DEBUG_TOOLBAR", cast=bool, default=False)
DEBUG = False

BASE_PROTOCOL = config("BASE_PROTOCOL", default="http") + "://"
BASE_URL = BASE_PROTOCOL + config("PROJECT_MAIN_DOMAIN", default="")
ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS", default="", cast=lambda v: [s.strip() for s in v.split(",")]
)


# Application definition

INSTALLED_APPS = [
    #  Local apps
    "back.apps.users",
    "back.apps.courses",
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party apps
    "corsheaders",
    "rest_framework",
    "drf_yasg2",
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ]
}

AUTH_USER_MODEL = "users.CustomUser"

ROOT_URLCONF = "back.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "back.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.config(
        default=SECRETS.DB_URL,
        ssl_require=config("DB_SSL_REQUIRE", default=True, cast=bool),
    )
}


CORS_ALLOWED_ORIGINS = config(
    "CORS_ALLOWED_ORIGINS", default="", cast=lambda v: [s.strip() for s in v.split(",")]
)
CSRF_TRUSTED_ORIGINS = config(
    "CSRF_TRUSTED_ORIGINS", default="", cast=lambda v: [s.strip() for s in v.split(",")]
)

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "cs-cz"

TIME_ZONE = "Europe/Prague"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Token": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
        }
    },
}

SWAGGER_URL = config("SWAGGER_URL", default=BASE_URL + "v1/api/")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        'file': {
            'level': "INFO",
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django-info.log',
        },
        'file_error': {
            'level': "ERROR",
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django-error.log',
        }
    },
    "loggers": {
        'django': {
            'handlers': ['file'],
            'level': "INFO",
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file_error'],
            'level': "ERROR",
            'propagate': True,
        },
        'logging_app': {
            'handlers': ['file'],
            'level': "INFO",
            'propagate': True,
        },
    },
}
